[{"name": "app.py", "content": "import plotly.express as px\nimport pandas as pd\nfrom shiny.express import ui\nfrom faicons import icon_svg\nimport random\nfrom datetime import datetime\nfrom shinywidgets import render_plotly\nimport palmerpenguins\nfrom shiny import App, reactive, render\nfrom shiny.express import input, ui\nfrom shiny import reactive\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\n\n# Load the Palmer Penguins dataset\npenguins_df = load_penguins()\n\n# Add a reactive calculation to filter the data\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    return penguins_df[penguins_df['species'].isin(selected_species)]\n\n# Set the page title\nui.page_opts(title=\"Penguins Data Tesfamariam\", fillable=True)\n\n# Create a Shiny UI sidebar\nwith ui.sidebar(open=\"open\"):\n    ui.h4(\"Sidebar\")\n    ui.input_selectize(\"selected_attribute\",\n                        \"Select Attribute\",\n                        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 10)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 1, 100, 50)\n    ui.input_checkbox_group(\"selected_species_list\", \"Select Species\", \n                            [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                            selected=[\"Adelie\"], inline=False)\n    ui.hr()\n    ui.a(\"My GitHub Repo\", href=\"https://github.com/Tesfamariam100/cintel-03-reactive\", target=\"_blank\")\n\n# Display a DataTable and a Data Grid\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.h4(\"Penguin Data Table\")\n        with ui.div(style=\"height: 400px; overflow-y: auto;\"):\n            @render.data_frame\n            def penguins_datatable():\n                return render.DataTable(filtered_data()) \n\n    with ui.card(full_screen=True):\n        ui.h4(\"Penguin Data Grid\")\n        with ui.div(style=\"height: 400px; overflow-y: auto;\"):\n            @render.data_frame\n            def penguins_grid():\n                return render.DataGrid(filtered_data())\n\n# Add a horizontal rule\nui.hr()\n\n# Create a layout for the graphs\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram\")\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(filtered_data(), \n                                x=input.selected_attribute(),\n                                nbins=input.plotly_bin_count(),\n                                color=\"species\").update_layout(height=600)\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot\")\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(filtered_data(),\n                                x=input.selected_attribute(),\n                                y=\"flipper_length_mm\",\n                                color=\"species\", \n                                title=\"Plotly Scatterplot: Species\").update_layout(height=600)\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram\")\n        @render.plot\n        def seaborn_histogram():\n            return sns.histplot(filtered_data(),\n                                x=input.selected_attribute(),\n                                bins=input.plotly_bin_count(),\n                                kde=True)\n\n", "type": "text"}]